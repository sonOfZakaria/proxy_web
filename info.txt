username = proxy_entry
password = proxy








we need 
-wsl************************
username = projet
password = projet


-doker********************

Étape 1 : Configuration de l'Environnement de Développement

Installation de WSL2 :
Assurez-vous que WSL2 est installé et configuré sur votre machine Windows. Si ce n'est pas le cas, vous pouvez le télécharger et l'installer via le Microsoft Store ou avec les commandes PowerShell.

Configuration de Docker :
Installez Docker Desktop pour Windows et configurez-le pour qu'il utilise WSL2 comme son moteur d'exécution. Cela permet une meilleure intégration et performance.

Création de l'environnement Python :
Utilisez un conteneur Docker basé sur une image Python officielle pour créer un environnement isolé pour votre application.
Configurez un Dockerfile pour automatiser la création de votre environnement de développement avec les dépendances nécessaires.


$ vi <filename> — Open or edit a file.
i — Switch to Insert mode.
Esc — Switch to Command mode.
:w — Save and continue editing.
:wq or ZZ — Save and quit/exit vi.
:q! — Quit vi and do not save changes.
yy — Yank (copy) a line of text.
p — Paste a line of yanked text below the current line.
o — Open a new line under the current line.
O — Open a new line above the current line.
A — Append to the end of the line.
a — Append after the cursor’s current position.
I — Insert text at the beginning of the current line.
b — Go to the beginning of the word.
e — Go to the end of the word.
x — Delete a single character.
dd — Delete an entire line.
Xdd — Delete X number of lines.
Xyy — Yank X number of lines.
G — Go to the last line in a file.
XG — Go to line X in a file.
gg — Go to the first line in a file.
:num — Display the current line’s line number.
h — Move left one character.
j — Move down one line.
k — Move up one line.
l — Move right one character.


Étape 2 : Développement du Proxy d'Entrée

Mise en place du serveur proxy avec Flask ou FastAPI :
Utilisez Flask ou FastAPI pour créer un serveur proxy simple qui peut accepter et rediriger des requêtes HTTP.
Intégrez des fonctionnalités de logging pour aider au débogage et à la surveillance.

Implémentation du chiffrement :
Utilisez la bibliothèque cryptography en Python pour implémenter le chiffrement RSA des données.


**************Étape 3 : Développement du Proxy de Sortie

Configuration pour gérer les requêtes et les réponses :
Similaire au proxy d'entrée, développez un serveur qui traite les requêtes déchiffrées et envoie des requêtes au serveur web cible.
Chiffrez les réponses avant de les renvoyer au proxy d'entrée.


Étape 4 : Échange de Clés RSA

Sécurisation de l'échange de clés :
Implémentez un mécanisme pour l'échange sécurisé des clés publiques entre les proxies.


Étape 5 : Tests et Validation

Tests avec Postman ou curl :
Testez le flux de requêtes et de réponses à travers vos proxies en utilisant des outils comme Postman ou curl.

Tests de performance et de charge :
Utilisez des outils comme Apache Benchmark ou locust.io pour tester la performance de vos proxies sous charge.


-app1 python( lire et chiffres à partir d'un port, envoyer à app2)
-app2 python (lire et déchiffré à partir de app1 et envoyer à navigateur web)













requests

create à proxy